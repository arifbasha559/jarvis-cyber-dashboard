import { audio } from 'framer-motion/client';
import React, { useState, useEffect } from 'react';
import { 
  FaMicrophone, 
  FaRobot, 
  FaBrain, 
  FaNetworkWired, 
  FaChartLine,
  FaCog,
  FaLightbulb,
  FaDatabase,
  FaShieldAlt,
  FaSatelliteDish,
  FaWaveSquare,
  FaRegClock,
  FaThermometerHalf,
  FaTachometerAlt,
  FaMemory,
  FaServer,
  FaCloud,
  FaUserAstronaut
} from 'react-icons/fa';
import { GiArtificialIntelligence, GiProcessor } from 'react-icons/gi';
import { IoMdPlanet } from 'react-icons/io';
import { RiVoiceRecognitionFill } from 'react-icons/ri';

const Home = () => {
  const [isListening, setIsListening] = useState(false);
  const [systemStatus, setSystemStatus] = useState({
    cpu: 24,
    memory: 68,
    network: 42,
    temperature: 36,
    processes: 87,
    uptime: '4d 12h'
  });
  const [voiceResponse, setVoiceResponse] = useState('');
  const [hologramActive, setHologramActive] = useState(true);


  // Simulate system status changes
  useEffect(() => {
      
      setSystemStatus({
        cpu: Number((Math.min(100, Math.max(5,  (Math.random() * 10 - 5))).toFixed(2))),
        memory: Number((Math.min(100, Math.max(10,  (Math.random() * 8 - 4))).toFixed(2))),
        network: Number((Math.min(100, Math.max(15,  (Math.random() * 12 - 6))).toFixed(2))),
        temperature: Number((Math.min(45, Math.max(30,  (Math.random() * 2 - 1))).toFixed(2))),
        processes: Number((Math.min(120, Math.max(50,  (Math.random() > 0.5 ? 1 : -1))).toFixed(2)))
      })
    

    // return () => clearInterval(interval);
  }, []);
  const [info, setInfo] = useState({
    userAgent: "",
    platform: "",
    language: "",
    online: false,
    deviceMemory: "N/A",
    hardwareConcurrency: "N/A",
    battery: null,
    network: null,
  });

  useEffect(() => {
    const getInfo = async () => {
      const nav = navigator;
      const win = window;

      const baseInfo = {
        userAgent: nav.userAgent,
        platform: nav.platform,
        language: nav.language,
        online: nav.onLine,
        network : navigator.connection || navigator.mozConnection || navigator.webkitConnection,
        deviceMemory: performance.memory || "N/A",
        hardwareConcurrency: nav.hardwareConcurrency || "N/A",
      };

      // Set base info first
      setInfo(prev => ({ ...prev, ...baseInfo }));

      // Then add battery info if available
      if (nav.getBattery) {
        try {
          const battery = await nav.getBattery();
          setInfo(prev => ({
            ...prev,
            battery: {
              level: battery.level,
              charging: battery.charging,
            },
          }));
        } catch (err) {
          console.error("Error getting battery info", err);
        }
      }
    };

    getInfo();
  }, []);
  
  const toggleListening = () => {
    setIsListening(!isListening);
    if (!isListening) {
      setVoiceResponse('How may I assist you today?');
    } else {
      setVoiceResponse('');
    }
  };
  
  const toggleHologram = () => {
    setHologramActive(!hologramActive);
  };
  
  console.log(info.network);
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 text-white to-gray-900 p-6 overflow-hidden relative">
      {/* Holographic grid background */}
      <div className="absolute inset-0 overflow-hidden opacity-20">
        {Array.from({ length: 30 }).map((_, i) => (
          <div 
            key={i}
            className="absolute border border-cyan-400 border-opacity-10"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              width: `${Math.random() * 300 + 100}px`,
              height: `${Math.random() * 300 + 100}px`,
              transform: `rotate(${Math.random() * 360}deg)`,
              animation: `float ${Math.random() * 10 + 5}s infinite ease-in-out`
            }}
          ></div>
        ))}
      </div>

      {/* Main dashboard */}
      <div className="relative z-10 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center space-x-4">
            <div className="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-blue-500">
              FRIDAY
            </div>
            <div className="flex items-center text-white space-x-2 text-sm bg-gray-800 bg-opacity-50 px-3 py-1 rounded-full border border-cyan-400 border-opacity-30">
              <div className={`w-2 h-2 rounded-full ${hologramActive ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`}></div>
              <span>{info.online ? 'Hologram Active' : 'Hologram Offline'}</span>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="text-sm text-gray-400 bg-gray-800 bg-opacity-50 px-3 py-1 rounded-full border border-cyan-400 border-opacity-30">
              <span>System Uptime: {systemStatus.uptime}</span>
            </div>
            <button 
              // onClick={toggleHologram}
              className="p-2 rounded-full bg-gray-800 bg-opacity-50 border border-cyan-400 border-opacity-30 hover:bg-opacity-70 transition-all duration-300"
            >
              <IoMdPlanet className="text-cyan-400 text-xl" />
            </button>
          </div>
        </div>

        {/* Main content grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* AI Core Status */}
          <div className="relative col-span-1">
            <div className="h-full bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-cyan-300 flex items-center">
                  <GiArtificialIntelligence className="mr-2" /> AI Core
                </h2>
                <div className="flex space-x-2">
                  <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
                  <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse" style={{ animationDelay: '0.3s' }}></div>
                  <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse" style={{ animationDelay: '0.6s' }}></div>
                </div>
              </div>
              
              {/* 3D Holographic Sphere */}
              <div className="relative flex justify-center items-center my-8">
                <div className={`relative w-40 h-40 rounded-full ${info.online ? 'opacity-100' : 'opacity-30'} transition-all duration-500`}>
                  {/* Outer glow */}
                  <div className={`absolute inset-0 rounded-full bg-cyan-400 blur-xl opacity-20 ${info.online ? 'animate-pulse' : ''}`}></div>
                  
                  {/* Grid sphere */}
                  <div className="absolute inset-0 rounded-full border border-cyan-400 border-opacity-30">
                    {[...Array(6)].map((_, i) => (
                      <div 
                        key={i}
                        className="absolute inset-0 rounded-full border border-cyan-400 border-opacity-20"
                        style={{
                          transform: `rotateX(${i * 30}deg) rotateY(${i * 30}deg)`,
                          animation: `rotate3d ${15 + i * 5}s infinite linear`
                        }}
                      ></div>
                    ))}
                  </div>
                  
                  {/* Core */}
                  <div className="absolute inset-6 rounded-full bg-cyan-400 bg-opacity-10 flex items-center justify-center">
                    <FaBrain className="text-cyan-400 text-4xl" />
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-6">
                <div className="bg-gray-800 bg-opacity-50 p-3 rounded-lg border border-cyan-400 border-opacity-10">
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-xs text-cyan-300">Neural Load</span>
                    <span className="text-xs font-mono">{systemStatus.cpu}%</span>
                  </div>
                  <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full"
                      style={{ width: `${systemStatus.cpu}%` }}
                    ></div>
                  </div>
                </div>
                <div className="bg-gray-800 bg-opacity-50 p-3 rounded-lg border border-cyan-400 border-opacity-10">
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-xs text-cyan-300">Memory</span>
                    <span className="text-xs font-mono">{systemStatus.memory}%</span>
                  </div>
                  <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-purple-400 to-pink-500 rounded-full"
                      style={{ width: `${systemStatus.memory}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Voice Interaction Panel */}
          <div className="relative col-span-1 lg:col-span-2">
            <div className="h-full bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-cyan-300 flex items-center">
                  <RiVoiceRecognitionFill className="mr-2" /> Voice Interface
                </h2>
                <div className="flex items-center space-x-2">
                  <div className="text-xs bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full border border-cyan-400 border-opacity-30">
                    <span>v1.0</span>
                  </div>
                  <div className="flex space-x-1">
                    <div className="w-3 h-3 rounded-full bg-green-400"></div>
                    <div className="w-3 h-3 rounded-full bg-yellow-400"></div>
                    <div className="w-3 h-3 rounded-full bg-red-400"></div>
                  </div>
                </div>
              </div>
              
              {/* Voice visualization */}
              <div className="relative h-32 mb-6 flex items-center justify-center">
                {isListening ? (
                  <div className="flex items-center justify-center space-x-1">
                    {[...Array(15)].map((_, i) => (
                      <div 
                        key={i}
                        className="w-1 h-8 bg-cyan-400 rounded-full origin-bottom"
                        style={{
                          animation: `equalize ${Math.random() * 0.5 + 0.3}s infinite alternate`,
                          animationDelay: `${i * 0.05}s`,
                          height: `${Math.random() * 20 + 10}px`
                        }}
                      ></div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center text-gray-400">
                    <p>Ready for voice command</p>
                  </div>
                )}
                
                {/* Voice response */}
                {voiceResponse && (
                  <div className="absolute bottom-0 left-0 right-0 text-center">
                    <div className="inline-block bg-gray-800 bg-opacity-70 px-4 py-2 rounded-full border border-cyan-400 border-opacity-30">
                      <p className="text-cyan-300">{voiceResponse}</p>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Microphone button */}
              <div className="flex justify-center">
                <button
                  onClick={toggleListening}
                  className={`relative w-20 h-20 rounded-full flex items-center justify-center transition-all duration-300 ${isListening ? 
                    'bg-red-500 shadow-lg shadow-red-500/30' : 
                    'bg-gray-700 shadow-[0px_0px_50px_2px] shadow-cyan-500/20 hover:shadow-cyan-500/40'
                  }`}
                >
                  <FaMicrophone className={`text-2xl ${isListening ? 'text-white' : 'text-cyan-400'}`} />
                  
                  {/* Pulsing ring effect */}
                  {isListening && (
                    <>
                      <div className="absolute inset-0 rounded-full border-2 border-red-400 animate-ping opacity-0"></div>
                      <div className="absolute inset-0 rounded-full border-2 border-red-400 animate-ping opacity-0" style={{ animationDelay: '0.3s' }}></div>
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* System modules grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {/* Processor Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <GiProcessor className="mr-2" /> Processor
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">{systemStatus.cpu}%</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mb-2 overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full"
                style={{ width: `${systemStatus.cpu}%` }}
              ></div>
            </div>
            <div className="flex justify-between text-xs text-gray-400">
              <span>Quantum Cores</span>
              <span>12/12 Active</span>
            </div>
          </div>

          {/* Memory Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <FaMemory className="mr-2" /> Memory
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">{(info.deviceMemory.usedJSHeapSize/(1024 ** 3) *100).toFixed(2)} GB</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mb-2 overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-purple-400 to-pink-500 rounded-full"
                style={{ width: `${((info.deviceMemory.usedJSHeapSize / info.deviceMemory.jsHeapSizeLimit) * 100)*20}%` }}
              ></div>
            </div>
            <div className="flex justify-between text-xs text-gray-400">
              <span>Holographic RAM</span>
              <span>{((info.deviceMemory.jsHeapSizeLimit  - info.deviceMemory.usedJSHeapSize) /(1024 ** 3)).toFixed(2)}</span>
            </div>
          </div>

          {/* Network Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <FaNetworkWired className="mr-2" /> Network
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">{((info.network?.downlink/info.network?.rtt)*100).toFixed(2)}%</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mb-2 overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-green-400 to-teal-500 rounded-full"
                style={{ width: `${((info.network?.downlink/info.network?.rtt)*1000).toFixed(2)}%` }}
              ></div>
            </div>
            <div className="flex justify-between text-xs text-gray-400">
              <span>{info.network?.effectiveType||NaN}</span>
              <span>{info.network?.downlink}Mb/s</span>
            </div>
          </div>

          {/* /* Temperature Module */}
                <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                  <FaThermometerHalf className="mr-2" /> Battery
                  </h3>
                  <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">{info.battery
            ? `${Math.round(info.battery.level * 100)}% `
            : "N/A"}</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full mb-2 overflow-hidden">
                  <div 
                  className="h-full bg-gradient-to-l from-green-400 to-red-500 rounded-full"
                  style={{ width: `${info.battery?.level * 100|| 0}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-xs text-gray-400">
                  <span>Cooling System</span>
                  <span>{info.battery ? ((info.battery.charging ? "Charging" : "Not Charging")) : "NaN"}</span>
                </div>
                </div>
              </div>

              {/* Secondary modules row */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
          {/* Processes Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <FaServer className="mr-2" /> Processes
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">{systemStatus.processes}</span>
            </div>
            <div className="space-y-2 text-gray-300">
              <div className="flex items-center justify-between text-xs">
                <span className="text-gray-400">Neural Networks</span>
                <span className="font-mono">24</span>
              </div>
              <div className="flex items-center justify-between text-xs">
                <span className="text-gray-400">Data Streams</span>
                <span className="font-mono">18</span>
              </div>
              <div className="flex items-center justify-between text-xs">
                <span className="text-gray-400">API Services</span>
                <span className="font-mono">32</span>
              </div>
              <div className="flex items-center justify-between text-xs">
                <span className="text-gray-400">Background</span>
                <span className="font-mono">13</span>
              </div>
            </div>
          </div>

          {/* Data Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <FaDatabase className="mr-2" /> Data Matrix
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">87%</span>
            </div>
            <div className="relative h-24 flex items-center justify-center">
              <div className="absolute w-20 h-20 rounded-full border-2 border-cyan-400 border-opacity-30 animate-spin-slow"></div>
              <div className="absolute w-16 h-16 rounded-full border-2 border-cyan-400 border-opacity-50 animate-spin-medium"></div>
              <div className="absolute w-12 h-12 rounded-full border-2 border-cyan-400 border-opacity-70 animate-spin-fast"></div>
              <FaDatabase className="text-cyan-400 text-xl" />
            </div>
            <div className="flex justify-between text-xs text-gray-400 mt-2">
              <span>Quantum Storage</span>
              <span>1.2YB</span>
            </div>
          </div>

          {/* Security Module */}
          <div className="bg-gray-800 bg-opacity-30 backdrop-blur-lg rounded-2xl border border-cyan-400 border-opacity-20 p-6 shadow-xl hover:border-opacity-40 transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-cyan-300 flex items-center">
                <FaShieldAlt className="mr-2" /> Security
              </h3>
              <span className="text-xs font-mono text-white bg-gray-800 bg-opacity-50 px-2 py-1 rounded-full">100%</span>
            </div>
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-gray-800 bg-opacity-50 p-2 rounded-lg text-center">
                <div className="text-green-400 text-sm">Firewall</div>
                <div className="text-xs text-gray-300">Active</div>
              </div>
              <div className="bg-gray-800 bg-opacity-50 p-2 rounded-lg text-center">
                <div className="text-green-400 text-sm">Encryption</div>
                <div className="text-xs text-gray-300">Quantum</div>
              </div>
              <div className="bg-gray-800 bg-opacity-50 p-2 rounded-lg text-center">
                <div className="text-green-400 text-sm">AI Shield</div>
                <div className="text-xs text-gray-300">Active</div>
              </div>
              <div className="bg-gray-800 bg-opacity-50 p-2 rounded-lg text-center">
                <div className="text-green-400 text-sm">Threats</div>
                <div className="text-xs text-gray-300">0</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Global animations */}
      <style jsx global>{`
        @keyframes rotate3d {
          0% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg); }
          100% { transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg); }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(5deg); }
        }
        @keyframes equalize {
          0% { height: 10px; }
          100% { height: 30px; }
        }
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes spin-medium {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes spin-fast {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default Home;